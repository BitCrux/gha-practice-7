name: Deployment
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3 # Checkout step must be here because the composite step is only part of this repository. Before local composite step can be used the code must be get. (If composite step is in own repo, checkout can be moved also there...)
      - name: Load & cache dependencies # Use the custom (composite) action 
        id: cache-deps
        uses: ./.github/actions/cached-deps # Value depend on where the actions is located. For actions located in own repo <github user name>/<repository name> -> e. g. BitCrux/my-action
        with: # Decide if caching should be used for linting or not. Provide input value to custom composite action in .github/actions/cached-deps
          caching: 'false' # In this case caching will not be used for job 'lint'
      - name: Output information # Use the output value from custom composite action
        run: echo "Cache used? ${{ steps.cache-deps.outputs.used-cache }}" # Print the output value
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load & cache dependencies # Use the custom (composite) action 
        uses: ./.github/actions/cached-deps # Value depend on where the actions is located. For actions located in own repo <github user name>/<repository name> -> e. g. BitCrux/my-action
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load & cache dependencies # Use the custom (composite) action 
        uses: ./.github/actions/cached-deps # Value depend on where the actions is located. For actions located in own repo <github user name>/<repository name> -> e. g. BitCrux/my-action
      - name: Build website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          path: ./dist
      - name: Output contents
        run: ls
      - name: Deploy site
        uses: ./.github/action/deploy # Use the custom js action
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # Use the access keys generated in AWS and defined in GitHub Repository Secrets.
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with: # Privde input values for custom js deploy action because the are required
          bucket: gha-custom-action-hosting # Provide bucket name
          dist-folder: ./dist # Point to the dist folder which contains the downloaded artifacts, so that they can be uploaded to AWS
          # bucket-region: us-east-2 # Not required, default will be used